//动态内存分配主要两个函数：malloc 和free   分别执行动态内存的分配和释放
//malloc从内存中提取一个合适内存，并向该程序返回一个指向这块内存的指针
//malloc的参数就是需要分配的内存字节（字符）数  同时对malloc返回的指针进行NULL进行检查是非常重要的
//
//另外还有两个内存分配函数：calloc 和 realloc
//calloc和malloc区别是：它在返回指针之前会被初始化为0。
//realloc是用于修改一个原来已经分配的内存块的大小。
//使用这个函数 你可以使用一块内存进行扩大和缩小。
//如果是扩大内存，原来内存保留，新内存放后面，新内存没有任何的初始化
//如果是缩小内存，该内存尾部部分内存被拿掉，剩余内存进行保留
//如果原来内存大小无法改变，将分配的另一块正确大小的内存并把原来的内存内容复制到新的块上
//因此要用realloc返回的新指针





//使用动态分配的内存

int *p;
p = malloc(100);
if (p == NULL)
{
	......
}
//若分配成功，那么我们就拥有一个指向100字节的指针。
//在整型为4字节的机器上，这块内存将当作25个整型元素的数组，p是指向整型的指针。
//也可以获得足够存储的内存：
p = malloc(25 * sizeof(int)); //即使在整数长度不同的机器上也可以获得正确的结果

//顺序表的内存的分配
LP = (SeqList*)malloc(sizeof(SeqList));   //LP中放的是顺序表的地址